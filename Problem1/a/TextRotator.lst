       |import std.stdio;
       |import std.conv;
       |
       |string rotate_text(string text, int n){  
     55|    if(n==0 || text.length == 0){
      8|        return text;
       |    }
     23|    text = rotate_text(text[1 .. $] ~ text[0], n - 1);
     23|    return text;
       |}
       |
       |string main_function(string[] args){
      3|    string text;
      3|    int number;
       |
      5|    if(args.length < 3 || args.length > 3){
      1|        return("Error: Debe enviar dos argumentos");
       |    }
       |
       |    try{
      2|        text = args[1];
      2|        number = to!int(args[2]);
      1|        string rotated_text = rotate_text(text, number);
      1|        return "El texto rotado es: " ~ rotated_text;
       |
       |    } catch (ConvException e){
      1|        return "Error: El segundo argumento debe ser un número.";
       |    }
       |}
       |
       |void main(string[] args){
       |
0000000|    writeln(main_function(args));
       |
       |}
       |
       |
       |unittest {
       |
       |    //Pruebas unitarias
      1|    assert(rotate_text("hola", 0) == "hola");
      1|    assert(rotate_text("hola", 1) == "olah");
      1|    assert(rotate_text("hola", 2) == "laho");
      1|    assert(rotate_text("hola", 3) == "ahol");
      1|    assert(rotate_text("hola", 4) == "hola");
      1|    assert(rotate_text("hola", 5) == "olah");
       |    
       |    //Casos bordes
      1|    assert(rotate_text("", 2) == "");
      1|    assert(main_function(["", "hola", "8"]) == "El texto rotado es: hola");
      1|    assert(main_function(["", "hola"]) == "Error: Debe enviar dos argumentos");
      1|    assert(main_function(["", "hola", "hola"]) == "Error: El segundo argumento debe ser un número.");
       |
      1|    writeln("¡Todos los tests pasaron correctamente!");
       |}
TextRotator.d is 96% covered
